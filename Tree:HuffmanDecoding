/*Huffman coding assigns variable length codewords to fixed length input characters based on their frequencies. More frequent characters are assigned shorter codewords and less frequent characters are assigned longer codewords. A Huffman tree is made for the input string and characters are decoded based on their position in the tree. We add a '0' to the codeword when we move left in the binary tree and a '1' when we move right in the binary tree. We assign codes to the leaf nodes which represent the input characters.
Sample Input

         {ϕ,5}
      0 /     \ 1
     {ϕ,2}   {A,3}
    0/   \1
{B,1}  {C,1}  

S="1001011"

Sample Output

ABACA
*/


/*  
   class Node
      public  int frequency; // the frequency of this tree
       public  char data;
       public  Node left, right;
    
*/ 

void decode(String S ,Node root)
    {
        
        Node temp=root;
        for(int i=0;i<S.length();i++){
            if(S.charAt(i)=='1'){
                temp=temp.right;
            }
            else{
                temp=temp.left;
            }
            if(temp.right==null && temp.left==null){
                System.out.print(temp.data);
                temp=root;
            }
        }
       
    }
